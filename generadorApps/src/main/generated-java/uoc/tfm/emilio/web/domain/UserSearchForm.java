/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package uoc.tfm.emilio.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;

import javax.inject.Named;

import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.SearchParameters;

import uoc.tfm.emilio.domain.User;
import uoc.tfm.emilio.domain.User_;
import uoc.tfm.emilio.web.domain.support.GenericSearchForm;
import uoc.tfm.emilio.web.faces.ConversationContextScoped;

/**
 * View Helper to search {@link User}.
 * It exposes a {@link User} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class UserSearchForm extends GenericSearchForm<User, Integer, UserSearchForm> {
    private static final long serialVersionUID = 1L;
    protected User user = new User();
    protected PropertySelector<User, String> usernameSelector = newPropertySelector(User_.username);
    protected PropertySelector<User, String> passwordSelector = newPropertySelector(User_.password);
    protected PropertySelector<User, Boolean> isEnabledSelector = newPropertySelector(User_.isEnabled);

    public User getUser() {
        return user;
    }

    @Override
    protected User getEntity() {
        return getUser();
    }

    @Override
    public UserSearchForm newInstance() {
        return new UserSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.property(usernameSelector, passwordSelector, isEnabledSelector);
        return sp;
    }

    @Override
    public void resetWithOther(UserSearchForm other) {
        this.user = other.getUser();
        this.usernameSelector = other.getUsernameSelector();
        this.passwordSelector = other.getPasswordSelector();
        this.isEnabledSelector = other.getIsEnabledSelector();
    }

    // Property selectors
    public PropertySelector<User, String> getUsernameSelector() {
        return usernameSelector;
    }

    public PropertySelector<User, String> getPasswordSelector() {
        return passwordSelector;
    }

    public PropertySelector<User, Boolean> getIsEnabledSelector() {
        return isEnabledSelector;
    }
}
